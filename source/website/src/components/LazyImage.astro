---
export interface Props {
  class?: string;
  src: string;
  "src-hq"?: string;
  id?: string;
  alt?: string;
}

const { class: className, src, "src-hq": srcHq, id, alt } = Astro.props as Props;
---

<img
  src={src}
  data-hq={srcHq}
  class={`lazy-image ${className}`.trim()}
  id={id}
  alt={alt}
/>
<script>
(() => {
  function imageLoader(src: string, destinationImage: HTMLImageElement) {
    return new Promise((resolve, reject) => {
      const image = new Image();
      image.onload = () => {
        destinationImage.onload = null;
        destinationImage.src = src;
        resolve(`Image loaded: ${src}`);
      };
      image.onerror = () => {
        reject(new Error(`Failed to load image: ${src}`));
      };
      image.src = src;
    });
  }

  function swapLoader() {
    window.removeEventListener("DOMContentLoaded", swapLoader);

    for (const img of document.querySelectorAll("img.lazy-image") as NodeListOf<HTMLImageElement>) {
      const highResSrc = img.getAttribute("data-hq");

      if (highResSrc) {
        const loadFunc = () => imageLoader(highResSrc, img).then(console.debug).catch(console.error);

        if (img.complete && img.naturalWidth !== 0) {
          // The image is already loaded
          loadFunc();
        } else {
          // The image is not loaded yet, set up the onload handler
          img.onload = loadFunc;
        }
      }
    }
  }

  window.addEventListener("DOMContentLoaded", swapLoader);
})();
</script>
